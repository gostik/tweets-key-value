package com.pushtorefresh.storio.sample.db.entity;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import com.pushtorefresh.storio.sqlite.annotations.StorIOSQLiteColumn;
import com.pushtorefresh.storio.sqlite.annotations.StorIOSQLiteType;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import com.squareup.wire.Wire;

import java.io.IOException;
import java.util.ArrayList;

import javax.inject.Inject;

/**
 * Just for demonstration, real Tweet structure is more complex
 */
@StorIOSQLiteType(table = "tweets")
public class Tweet extends Message {

    // if object was not inserted into db, id will be null
    @Nullable
    @StorIOSQLiteColumn(name = "_id", key = true)
    public Long id;

    @NonNull
    @StorIOSQLiteColumn(name = "author")
    @ProtoField(type = Datatype.STRING, tag = 1, label = Label.REQUIRED)
    public String author;

    @NonNull
    @ProtoField(type = Datatype.STRING, tag = 2)
    @StorIOSQLiteColumn(name = "content")
    public String content;

    @NonNull
    @ProtoField(type = Datatype.STRING, tag = 3)
    @StorIOSQLiteColumn(name = "content1")
    public String content1;

    @NonNull
    @ProtoField(type = Datatype.STRING, tag =4)
    @StorIOSQLiteColumn(name = "content2")
    public String content2 ;

    // leave default constructor for AutoGenerated code
    Tweet() {

    }



    private Tweet(Builder builder) {
        this.id = builder.id;
        this.author = builder.author;
        this.content = builder.content;
    }

    private Tweet(@Nullable Long id, @NonNull String author, @NonNull String content,@NonNull String content1,@NonNull String content2) {
        this.id = id;
        this.content = content;
        this.content1 = content1;
        this.content2 = content2;
        this.author = author;

//        Builder builder = new Builder(this)
//                .author(author)
//                .content(content)
//                .content1(content1)
//                .content2(content2)
//                .id(id);
//        setBuilder(builder);

    }

    @NonNull
    public static Tweet newTweet(@Nullable Long id, @NonNull String author, @NonNull String content,@NonNull String content1,@NonNull String content2) {
        return new Tweet(id, author, content,content1,content2);
    }

    @NonNull
    public static Tweet newTweet(@NonNull String author, @NonNull String content,@NonNull String content1,@NonNull String content2) {
        return new Tweet(null, author, content,content1,content2);
    }

    @Nullable
    public Long id() {
        return id;
    }

    @NonNull
    public String author() {
        return author;
    }

    @NonNull
    public String content() {
        return content;
    }

    @NonNull
    public String content1() {
        return content1;
    }

    @NonNull
    public String content2() {
        return content2;
    }

    public byte[] getByteArray() {
        return toByteArray();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Tweet tweet = (Tweet) o;

        if (id != null ? !id.equals(tweet.id) : tweet.id != null) return false;
        if (!author.equals(tweet.author)) return false;
        return content.equals(tweet.content);
    }

    @Override
    public int hashCode() {
        int result = id != null ? id.hashCode() : 0;
        result = 31 * result + author.hashCode();
        result = 31 * result + content.hashCode();
        return result;
    }

    @Override
    public String toString() {
        return "Tweet{" +
                "id=" + id +
                ", author='" + author + '\'' +
                ", content='" + content + '\'' +
                '}';
    }

    public static final class Builder extends Message.Builder<Tweet> {

        public  Long id;
        public String author;
        public  String content;
        public  String content1;
        public  String content2;

        public Builder() {
        }

        public Builder author(String author) {
            this.author = author;
            return this;
        }

        public Builder content(String content) {
            this.content = content;
            return this;
        }

        public Builder content1(String content1) {
            this.content1 = content1;
            return this;
        }

        public Builder content2(String content2) {
            this.content2 = content2;
            return this;
        }

        public Builder id(Long id) {
            this.id = id;
            return this;
        }

        public Builder(Message message) {
            super(message);
        }


        @Override
        public Tweet build() {
            return new Tweet(id,author,content,content1,content2);
        }
    }
}
